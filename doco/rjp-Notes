Terraform TCS- RJP
https://registry.terraform.io/     Hashicorp Terraform Registry

Installation of Terraform

Download terraform https://developer.hashicorp.com/terraform/install  for respective OS (Windows)

Editor to write confg. files https://code.visualstudio.com/download

Aws Console URL: https://ashokbnj.signin.aws.amazon.com/console
Account id : ashokbnj

Authentication with Provider (AWS):

Provider Definition:
    #file1.tf
    # This is in HCL language and this is a comment

#HCL configuration is made up of blocks


provider "aws" {
    #configuration for provider will be defined here
}

Initialize plugins for Provider    
#terraform init    (will download plugins in local machine in current directory/folder in order to connect to the provider)


Multiple Provider with version
#file1.tf
provider "aws" {
    
}
provider "google" {
  
}
provider "oci" {
  
provider "azurerm" {
  features {}
}

}
provider "acl" {
}
terraform {
  required_providers {
    acl = {
      source = "tsuru/acl"
      version = "0.1.3"
    }
    aws = {
        source = "hashicorp/aws"
        version = "5.52.0"
    }
  }
}

#terraform init -upgrade

Arguments for Specifying Provider Version constraint
1- >=5.0
2- <=5.0
3- >=5.10,<=5.15
4- ~>5.0

Authentication:
Block_name "block_type" {
args1 = args1_value
.......
}

#provider.tf
provider "aws" {
  access_key = "xxxxx"
  secret_key = "xxxxxxx"
  region = "us-east-1"
}

Resource
#main.tf
resource "aws_instance" "instance1" {
  ami = "amixxxxxxxxxxxxxx"
  instance_type = "t2.micro"
}

res_block  "resource_type"  "referene_name_for_TF" {
args1 = args_value
res_name = res_name_value
tags = {
tag1 = "value"
tag2 = "value"
}
}

Example for resource types:
aws_vpc
aws_instance
aws_s3_bucket
azurerm_virtual_network
azurerm_public_ip
azurerm_resoruce_group
oci_virtual_machine



#terraform plan  

Instance Example 
#main.tf
resource "aws_instance" "instance1" {
  ami = "ami-01b799c439fd5516a"
  instance_type = "t2.micro"
  tags = {
    Name = "userx_vm"
  }
}

#terraform apply
#terraform apply -auto-approve


TASK 1: Add vpc and s3 bucket to your infra. using TF in the same main.tf file

Destroy Entire Infa
#terraform destroy

Destroy a resource
#terraform destroy -target aws_vpc.vpc1

Synatx of command: terraform destroy -target resource_type.reference_name

Comment the code to destroy 
Multi line comment - /*     */
Single line comment - #

To prevent accidental deletion use :
#main.tf
resource "aws_instance" "instance1" {
  ami = "ami-01b799c439fd5516a"
lifecycle {
  prevent_destroy = true
}
  instance_type = "t2.micro"
  tags = {
    Name = "kumar_vm"
  }
}

Best Practices

#terraform fmt    (for formatting)
#terraform validate    (for syntax check)
#terraform plan
#terraform apply


Attributes and output
#main.tf
resource "aws_instance" "ins1" {
  ami           = "ami-01b799c439fd5516a"
  instance_type = "t2.micro"
  tags = {
    Name = "ec2-1"
  }
}
resource "aws_instance" "ins2" {
  ami           = "ami-0195204d5dce06d99"
  instance_type = "t2.micro"
  tags = {
    Name = "ec2-2"
  }
}
output "ins_detail1" {
  value = aws_instance.ins1.public_ip
}
output "ins_detail2" {
  value = aws_instance.ins2.private_ip
}

#terraform plan
#terraform apply -auto-approve

#terraform output ins_detail1

#terraform output ins_detail2

Fetching attributes from state file
#terraform state list   (list all the resoruce of infr)
#terraform state show aws_instance.ref_name   (list all the attributes of the specified resource)

TASK 2:
    Create S3 bucket on aws cloud using terraform and output below attributes:
        mybuck_arn:   
        mybuck_bucket_domain_name:   
Important: Delete once done

TASK3:
 Create iam user with below naming convention on aws cloud using terraform:
Username - TCS-Your_name
Important: Delete once done

TASK4:
     create iam user with access key and secret key on aws cloud using terraform and add ouput block for secret key and access key
Username - TCS-Your_name
Important: Delete once done

Solution:
#main.tf
resource "aws_iam_user" "user1" {
  name = "TCS-anshu"
}
resource "aws_iam_access_key" "key1" {
  user = aws_iam_user.user1.name
}
output "accesskey" {
  value = aws_iam_access_key.key1.id
  sensitive = true
}
output "secretkey" {
  value = aws_iam_access_key.key1.secret
  sensitive = true
}


Variables:
Example 1: In main.tf
#main.tf
resource "aws_instance" "ins1" {
  ami = "ami-01b799c439fd5516a"
  instance_type = var.instype
}

variable "instype" {
  default = "t2.micro"
}

Example 2: In vars.tf
#vars.tf
variable "instype" {
  default = "t2.micro"
}
variable "buck_name" {
  default = "ak9675123buck"
}

#main.tf
resource "aws_instance" "ins1" {
  ami = "ami-01b799c439fd5516a"
  instance_type = var.instype
}
resource "aws_s3_bucket" "buck1" {
    bucket = var.buck_name
}

Example 3: Input from the user
#vars.tf
variable "instype" {
  default = "t2.micro"
}
variable "buck_name" {
description = "Enter name for S3 bucket"
}

#main.tf
resource "aws_instance" "ins1" {
  ami = "ami-01b799c439fd5516a"
  instance_type = var.instype
}
resource "aws_s3_bucket" "buck1" {
    bucket = var.buck_name
}

#terraform plan -out plan_name
#terraform apply plan_name


Example 4: Using terraform.tfvars to define values for variables

#main.tf
resource "aws_instance" "ins1" {
  ami           = "ami-01b799c439fd5516a"
  instance_type = var.ins_type
}
resource "aws_s3_bucket" "buck1" {
  bucket = var.s3_name
}

#vars.tf
variable "ins_type" {
  #default = "t2.micro"
}
variable "s3_name" {
  description = "Enter name for S3 bucket"
}

#terraform.tfvars
ins_type = "t2.nano"
s3_name  = "tcsbucket9675"

Example 5: using any_name.tfvars
#any_name.tfvars
ins_type = "t2.nano"
s3_name  = "tcsbucket9675"

#terraform plan -var-file="any_name.tfvars"   (if not used then it will take default values)

Example 6: using any_name.auto.tfvars
#any_name.auto.tfvars
ins_type = "t2.nano"
s3_name  = "tcsbucket9675"

#terraform plan  (it will automatically call the values form the tfvars file)

Note: Terraform.tfvars or any_name.tfvars or any_name.auto.tfvars is given more priority then values defined under vars.tf or main.tf file


Example 7: Pass value of variable on terminal  (mostly used in testing environment)

#terraform plan -var ins_type=t2.small -var s3_name=buck-cli-9675                
#terraform plan -var ins_type=t2.small -var s3_name=buck-cli-9675 -out plan_name    (this will save the plan with the given values)

Example 8: Using Environment Variable to define the value of variable  
Syntax: TF_VAR_variable_name=variable_value  

DATA Types:
Example 1: String and Number
resource "aws_s3_bucket" "name" {
  bucket = var.inp_name
  count = var.number-inp
}
variable "inp_name" {
  description = "Enter name for S3 bucket"
  type = string
}
variable "number-inp" {
  description = "Enter how many number of s3 bucket to be created ?"
  type = number
}

Example 2: List
#main.tf
resource "aws_s3_bucket" "name" {
  bucket = var.buck_name[0]
}
variable "buck_name" {
  type = list
  default = ["buck-dev9675" , "buck-tet9675" , "buck-prod9675" , "buck-preprod9675"]
}

#main.tf
resource "aws_s3_bucket" "name" {
  bucket = var.buck_name[(var.user_inp)-1]
}
variable "buck_name" {
  type = list
  default = ["buck-dev9675" , "buck-test9675" , "buck-prod9675" , "buck-preprod9675"]
}
variable "user_inp" {
  description = "Which bucket to create enter number buck-dev9675 buck-test9675 buck-prod9675 buck-preprod9675"
  type = number
}

Example: Map
#main.tf
resource "aws_s3_bucket" "name" {
  bucket = var.buck_name.preprod
}
variable "buck_name" {
  type = map
  #default = { dev = "dev-buck9675" , prod = "prod-buck9675" , test = "testbuck08786" , preprod = "preprodbuck8757" }
  default = {
    dev = "dev-buck9675"
    prod = "prod-buck9675"
    test = "testbuck08786"
    preprod = "preprodbuck8757"
  }
}


#main.tf
resource "aws_s3_bucket" "name" {
  bucket = var.buck_name[var.user_env]
}
variable "buck_name" {
  type = map
  #default = { dev = "dev-buck9675" , prod = "prod-buck9675" , test = "testbuck08786" , preprod = "preprodbuck8757" }
  default = {
    dev = "dev-buck9675"
    prod = "prod-buck9675"
    test = "testbuck08786"
    preprod = "preprodbuck8757"
  }
}

variable "user_env" {
  descr iption = "Enter your working environment dev/prod/test/preprod"
}

Custom conditions in Variable:
Validation argument
#main.tf
variable "user_env" {
  description = "Enter your bucket-name"
  validation {
    condition = length(var.user_env) > 5 && substr(var.user_env , 0 , 3) == "tcs"
    error_message = "Name of bucket can not be less then 5 charcters"
  }
}
resource "aws_s3_bucket" "name" {
  bucket = var.user_env
}

Create several instancs of a resource without using seperate resource block for each:
1- Count
2- for_each
Note: count and for_each can not be used together in same block

Count accepts whole number to create number of similar resources. for list data type
If count is set in a block you can modify configuration of that block using count.index attribute

Example 1:
#main.tf
resource "aws_s3_bucket" "s3bucket" {
  bucket = "tcsbuck-${count.index}"
  count  = 5  #index 0-4
}

Example 2: make it interactive
#main.tf
resource "aws_s3_bucket" "s3bucket" {
  bucket = "tcsbuck-${count.index}"
  count  = var.use_inp
}
variable "use_inp" {
  description = "Enter the number of buckets to crweate"
}

Example3: 
#main.tf
resource "aws_s3_bucket" "s3bucket" {
  bucket = var.s3-names[count.index]
  count  =length(var.s3-names)
}

variable "s3-names" {
  type = list
}

 #tcs.auto.tfvars
s3-names = ["buck-kumar" , "buck-akhil" , "buck-hussain" , "buck-rubina" , "buck-madhav" , "buck-santosh"]

for_each  : for map data type
For_each object provides two attributes:
1- each.key
2- each.value

Example 1:
#main.tf
resource "aws_instance" "myname" {
  for_each      = var.ins-details
  ami           = each.value
  instance_type = "t2.micro"
  tags = {
    Name = each.key
  }
}
variable "ins-details" {
  type = map(any)
  default = {
    dev-instance  = "ami-01b799c439fd5516a"
    prod-instance = "ami-0195204d5dce06d99"
   # test-instance = "ami-0583d8c7a9c35822c"
  }
}

Exampe 2: resource "aws_instance" "myname" {
#main.tf
resource "aws_instance" "myname" {
for_each      = var.ins-details
  ami           = each.value.ami
  instance_type = each.value.ins_type
  tags = {
    Name = each.key
  }
}
variable "ins-details" {
  type = map(any)
  default = {
    dev-instance  = { ami = "ami-01b799c439fd5516a" , ins_type = "t2.micro"}
    prod-instance = { ami = "ami-0195204d5dce06d99" , ins_type = "t3.micro"}
   # test-instance = "ami-0583d8c7a9c35822c"
  }
}

TASK 5 : 
You are tasked with setting up multiple IAM users for a project on AWS using Terraform. 
Each user should have a username and a specified list of attached IAM policies. Use the for_each argument to create the following IAM users:
User: tcsyourname
Attached Policies: ["arn:aws:iam::aws:policy/AmazonS3FullAccess"]
User: tcsfriend1name
Attached Policies: ["arn:aws:iam::aws:policy/AmazonS3FullAccess"]
User: tcsfriend2name
Attached Policies: ["arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"]

Hint: You'll need to use the aws_iam_user and aws_iam_user_policy_attachment resources. 


resource "aws_iam_user" "userTCS" {
  for_each = var.user-details
  name     = each.value.name
  tags = {
    TCS-Name = each.value.name
  }
}
resource "aws_iam_user_policy_attachment" "test-attach" {
  for_each   = var.user-details
  user       = each.value.name
  policy_arn = each.value.policy_arn
}
variable "user-details" {
  type = map(any)
  default = {
    user-1 = { name = "TCS-Sharafat", policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess" }
    user-2 = { name = "TCS-Bartolo", policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess" }
    user-3 = { name = "TCS-Leandro", policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess" }
  }
}

TASK 6: Create eip on aws using terraform without attaching it to any instance

resource "aws_eip" "newip" {
  domain = "vpc"
  tags = {
    Name = "test_eip"
  }
}

Conditional Expression
Synatx:  Condition ? true_value : false_value

Example 1:
#main.tf
resource "aws_instance" "instance1" {
    count = var.user_inp == "kumar" ? 1 : 0
  ami = "ami-01b799c439fd5516a"
  instance_type = "t2.micro"
  tags = {
    Name = "kumar_vm"
  }
}

variable "user_inp" {
  description = "Enter your name"
}


Example 2:
#main.tf
resource "aws_instance" "instance1" {
  ami = "ami-01b799c439fd5516a"
  instance_type = var.user_inp == "dev" ? "t2.micro" : "t2.nano"
  tags = {
    Name = "kumar_vm"
  }
}

variable "user_inp" {
  description = "Enter your working env dev/prod"
}


Example 3:
#main.tf
resource "aws_instance" "instance1" {
    count = lower(var.user_inp) == "dev" ? 1 : 0
  ami = "ami-01b799c439fd5516a"
  instance_type = "t2.nano"
  tags = {
    Name = "kumar_vm"
  }
}
resource "aws_instance" "instance2" {
     count = var.user_inp == "prod" ? 1 : 0
  ami = "ami-01b799c439fd5516a"
  instance_type =  "t2.large" 
  tags = {
    Name = "kumar_vm"
  }
}
resource "aws_instance" "instance3" {
    count = var.user_inp == "test" ? 1 : 0
  ami = "ami-01b799c439fd5516a"
  instance_type =  "t2.micro"
  tags = {
    Name = "kumar_vm"
  }
}

variable "user_inp" {
  description = "Enter your working env dev/prod/test"
  validation {
    condition     = var.user_inp == "dev" || var.user_inp ==  "prod" || var.user_inp == "test"
    error_message = "Unauthorised user"
  }
}

Example3:(another version)
resource "aws_instance" "instance1" {
  #count         = lower(var.user_inp) == "prod" ? 1 : (lower(var.user_inp) == "test" ? 2: (lower(var.user_inp) == "dev" ? 3:0))
  ami           = "ami-01b799c439fd5516a"
  instance_type = lower(var.user_inp) == "prod" ? "t2.large" : (lower(var.user_inp) == "test" ? "t2.micro": (lower(var.user_inp) == "dev" ? "t2.nano":0))
  tags = {
    Name = "Santosh_vm"
  }
}
variable "user_inp" {
  description = "Enter your working env dev/prod/test"
  validation {
    condition     = var.user_inp == "dev" || var.user_inp ==  "prod" || var.user_inp == "test"
    error_message = "Unauthorised user"
  }
}

Functions https://developer.hashicorp.com/terraform/language/functions
To test the functions use :
#terraform console

Element: used to retrieve value from list using index number
syntax: element(var_list, index_number)
#main.tf
resource "aws_instance" "instance1" {
  ami = "ami-01b799c439fd5516a"
  instance_type = element(var.ins-type , 5)
  tags = {
    Name = "kumar_vm"
  }
}

variable "ins-type" {
type =list
  default = ["t2.micro" , "t2.nano" , "t2.large" , "t3.micro"]
}

Task:List = ["t2.micro" , "t2.nano" , "t2.large" , "t3.micro" ,"t2.large"] get the last element from the list to create instance

Task eg1:
resource "aws_instance" "instance1" {
  ami           = "ami-01b799c439fd5516a"
  instance_type = element(var.ins-type, (length(var.ins-type)-1))
  tags = {
    Name = "kumar_vm"
  }
}
variable "ins-type" {
  type    = list(any)
  default = ["t2.micro", "t2.nano", "t2.large", "t3.micro"]
}

With Variable eg2:
resource "aws_instance" "instance1" {
  ami           = "ami-01b799c439fd5516a"
  instance_type = var.ins-type[length(var.ins-type)-1]
  tags = {
    Name = "kumar_vm"
  }
}
variable "ins-type" {
  type    = list(any)
  default = ["t2.micro", "t2.nano", "t2.large", "t3.micro"]
}

lookup: used to retrieve value from map using keys
syntax: lookup(var_map,key , default_value)

Example 1: to retreive using variables
#main.tf
resource "aws_instance" "instance1" {
  ami = "ami-01b799c439fd5516a"
  instance_type = var.ins-type[var.user_inp]
  tags = {
    Name = "kumar_vm"
  }
}

variable "ins-type" {
  default = {
    dev = "t2.micro"
    prod = "t3.micro"
  }
}
variable "user_inp" {
  description = "Enter your env"
}
Note: if given input is not in the map variable it throws error

Example 2: using lookup function
#main.tf
resource "aws_instance" "instance1" {
  ami = "ami-01b799c439fd5516a"
  instance_type = lookup(var.ins-type, var.user_inp , "t2.nano")
  tags = {
    Name = "kumar_vm"
  }
}

variable "ins-type" {
  default = {
    dev = "t2.micro"
    prod = "t3.micro"
  }
}
variable "user_inp" {
  description = "Enter your env"
}


zipmap : create map from two different list by zipping the values
syntax: zipmap(var_list1_key , var_list2_value)
#main.tf
resource "aws_eip" "myname" {
  count = 4
  tags = {
    Name = "eip-${count.index+1}"
  }
}
output "ips" {
  value = zipmap( aws_eip.myname[*].arn , aws_eip.myname[*].public_ip )
}

Locals: assigning a name to an expression
#main.tf
resource "aws_instance" "name" {
  ami = local.myamiids
  instance_type = local.ins-type
}

locals {
  myamiids = "ami-01b799c439fd5516a"
  ins-type = "t2.micro"
}


csvdecode and file:
Example`:
#main.tf
locals {
  ami-data = csvdecode(file("./data.csv"))
}
resource "aws_instance" "name" {
  ami = local.ami-data[count.index].amiids
  instance_type = local.ami-data[count.index].ins-type
  count = length(local.ami-data)
}
output "mydata" {
  value = local.ami-data
}
#data.csv
amiids,ins-type
"ami-01b799c439fd5516a","t2.micro"
"ami-0195204d5dce06d99","t2.micro"
"ami-04b70fa74e45c3917","t2.nano"

Debugging and Logs
Set env variable as TF_LOG with any of five verboity levels: TRACE, DEBUG, INFO, WARN, ERROR
#setx TF_LOG INFO
To store logs in a file
#setx TF_LOG_PATH C:\filename
Note:restart editor to reload env changes

Load order:
Use depends_on argument to control the dependencies

Taint: force recreation of resource
#terraform taint aws_instance.instance1
#terraform untaint aws_instance.instance1
Use replace instead of taint
#terraform apply -replace aws_instance.instance1

Terraform Graph
#main.tf
resource "aws_instance" "instance1" {
  ami = "ami-01b799c439fd5516a"
  instance_type = "t2.micro"
}
resource "aws_eip" "name" {
  depends_on = [ aws_instance.instance1 ]
}
resource "aws_s3_bucket" "name" {
  
}
resource "aws_iam_user" "name" {
  name = "kumar-tcs"
  depends_on = [ aws_s3_bucket.name ]
}

Install extension anmed as graphviz from tintinweb
select grpah file and then Menu-->view-->command pallete-->graphviz(the graph will be displaye)

#terraform graph > graph

Data Source
First creat a vpc on aws consle directly
Example1:
#main.tf
data "aws_vpc" "myvpc" {
  id = "vpc-0090dccf4807daf04"
  
}

resource "aws_subnet" "main" {
  vpc_id     = data.aws_vpc.myvpc.id
  cidr_block = "10.0.0.0/24"
  tags = {
    Name = "Main"
  }
}

Task: Create eip on aws console and then create instance using terraform and attach eip to the instance.
Solution:
#main.tf

data "aws_eip" "eip" {
  id = "eipalloc-0046706f502eba7ac"
}
resource "aws_instance" "ins" {
  ami           = "ami-06c68f701d8090592"
  instance_type = "t2.micro"
  tags = {
    Name = "madhavvm"
  }
}
resource "aws_eip_association" "test" {
  instance_id   = aws_instance.ins.id
  allocation_id = data.aws_eip.eip.id
}

Provisioners
Local Exec
Remote Exec
File

Provisioners are alwasy defined under resource block. No independent provisioner block

based on execution two types:
creation time
destroy time

Local Exec:
    Example1:
        #main.tf
        resource "aws_instance" "instance1" {
  ami = "ami-01b799c439fd5516a"
  instance_type = "t2.micro"
  tags = {
    Name = "kumar_vm"
    Env= "test"
  }

provisioner "local-exec" {
    #when = create (by default when is set to create)
  command = "echo ${self.public_ip} >> ip.yaml"
}
}

#example2:
    #main.tf
    resource "aws_instance" "instance1" {
  ami = "ami-01b799c439fd5516a"
  instance_type = "t2.micro"
  tags = {
    Name = "kumar_vm"
    Env= "test"
  }

provisioner "local-exec" {
    when = destroy   #running provisioner on destroy time
  command = "echo ${self.public_ip} >> ip.yaml"
}
}


Remote-Exec:
    Example1:
        #main.tf
        resource "aws_instance" "instance1" {
  ami = "ami-04b70fa74e45c3917"
  instance_type = "t2.micro"
  key_name = "newkey"
  tags = {
    Name = "kumar_vm"
  }

provisioner "remote-exec" {
   # on_failure = fail
    #on_failure = continue
  inline = [ 
"sudo apt-update -y",
"sudo apt install nginx -y",
"sudo systemctl enable nginx",
"sudo systemctl start nginx"
 ]
}

connection {
  type = "ssh"
  user = "ubuntu"
  private_key = file("./newkey.pem")
  host = self.public_ip
}
}


Example2:
main.tf
resource "aws_instance" "instance1" {
  ami                    = "ami-04b70fa74e45c3917"
  instance_type          = "t2.micro"
  key_name               = "madhavkey"
  vpc_security_group_ids = [data.aws_security_group.sg.id]
  tags = {
    Name = "madhavvm"
  }
  provisioner "remote-exec" {
    inline = [
      "sudo apt-update -y",
      "sudo apt install nginx -y",
      "sudo systemctl enable nginx",
      "sudo systemctl start nginx"
    ]
  }
  connection {
    type        = "ssh"
    user        = "ubuntu"
    private_key = file("./madhavkey.pem")
    host        = self.public_ip
  }
}
data "aws_security_group" "sg" {
  id = "sg-00a79cfac1fbe924f"
}

FIle Provisioner:
Create a file to copy in current directory file1.txt
#main.tf
resource "aws_instance" "myname" {
  ami = "ami-04b70fa74e45c3917"
  vpc_security_group_ids = [ data.aws_security_group.myname.id ]
  instance_type = "t2.micro"
  key_name = "newkey"
  tags = {
    Name = "new_vm"
  }
provisioner "file" {
  source = "./file1.txt"
  destination = "/tmp/file1.txt"
}
connection {
  type = "ssh"
  user = "ubuntu"
  private_key = file("./newkey.pem")
  host = self.public_ip
}
}
data "aws_security_group" "myname" {
  id = "sg-00a79cfac1fbe924f"
}

Import: manage an exisiting infra on provider (should import each resource one by one)
To import a resource using import blocks, you must:
Define an import block for the resource(s).
Add a corresponding resource block to your configuration , or generate configuration for that resource.
Run terraform plan to review how Terraform will import the resource(s).
Apply the configuration to import the resources and update your Terraform state.

#imports.tf
import {
  to = aws_instance.ins1
  id = "xxxxx"
}

#terraform plan -generate-config-out="main.tf"
Review the confg. file generated

#terraform apply  (to import and update the resource)

Workspace:
#terraform workspace new dev/prod/test
#terraform workspace show
#terraform workspace list
#terraform workspace select prod
#terraform workspace delete dev


#main.tf
resource "aws_vpc" "myname" {
cidr_block = "10.0.0.0/24"
tags = {
  Name= var.envname
}
}
variable "envname" {
  description = "Enter your env"
}


Remote Backend:
    #main.tf
    provider "aws" {
  access_key = "xxxxx"
  secret_key = "xxxxx"
  region     = "us-east-1"
}

terraform {
  backend "s3" {
    bucket = "tbucket_name"      (note: bucket should be available on aws console)
    key = "tcs-infra.tfstate"
    region = "us-east-1"
  }
}
    


Modules:
Create a folder with resource.tf files and the in order to use this folder as module
#main.tf
module "tcs-module" {
  source = "../modules/module-1"
}

Module from terraform rsgistry:
#main.tf
module "tcs" {
  source = "../modules/module-1"
  tag_names = "tcs-tag"
}

module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "5.8.1"
  cidr = "10.0.0.0/24"
}

Download git bash to clone files locally when using terraform registry https://git-scm.com/downloads

#vars.tf
variable "tag_names" {
  default = "default-tag"
}

#eip.tf
resource "aws_eip" "myname" {
  instance = null
  tags = {
    Name = var.tag_names
  }
}

#vpc.tf
resource "aws_vpc" "myname" {
  cidr_block = "10.0.0.0/24"
  tags = {
    Name = var.tag_names
  }
}

#inst.tf
resource "aws_instance" "instance1" {
  ami = "ami-01b799c439fd5516a"
  instance_type = "t2.micro"
 tags = {
    Name = var.tag_names
  }
}


Remote Collaboration :
GIT- tool to manage repo
GIthub- store repo

Step 1- Download git bash and install
https://git-scm.com/download/win

Step 2- sign up or sign with personal account on github.com
Step 3- create a new public repo 

Initial configuration of git
#git config --global user.name "kumar"
#git config --global user.email "kumar@gmail.com

#git config --list  (to verify config)
#cd your folder
#git init  ->to initialize 
#git status -> to check status
#git add .   -> to add files in git
#git commit -m "first commit"  -> to commit changes
#git status(it should say nothing to commit)

#git remote add origin https://github.com/ak9675/tcsrepo
#git push origin master

Terraform cloud: https://app.terraform.io/session





















@@PS C:\Users\Administrator\Desktop\TCS\Day5> terraform init -plugin-dir "C:\Users\Administrator\Desktop\TCS\Plugins\.terraform\providers"


Parking:  When two files with different name.auto.tfvars haing same variable names which one will be considered ?






